{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","api/api.ts","reportWebVitals.js","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","api/users-api.ts","redux/users-reducer.ts","api/auth-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","utils/validators/validators.ts","components/common/FormsControls/FormsControls.tsx","components/Dialogs/AddMessageForm/AddMessageReduxForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.jsx","assets/images/default_user.png","components/common/Paginator/Paginator.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","assets/images/loader.svg","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStausWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/PostsReduxForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/common/FormsControls/FormsControls.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Users/Users.module.css","components/Header/Header.module.css"],"names":["module","exports","ResultCodesEnum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","APIInstance","axios","create","withCredentials","baseURL","headers","profileAPI","userId","get","response","data","status","put","photoFile","formData","FormData","append","profile","initialState","posts","id","text","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","savePhotoSuccess","photos","getUserProfile","dispatch","a","ProfileApi","profileReducer","state","action","newPost","dialogs","name","messages","message","dialogsReducer","newMessage","newMessageText","friends","avatar","sidebarReducer","usersAPI","currentPage","pageSize","term","friend","post","delete","users","totalUsersCount","isFetching","followingInProgress","filter","followSuccess","unfollowSuccess","setUsers","setTotalUsersCount","totalCount","setCurrentPage","toggleIsFetching","toggleFollowingProgress","setFilter","payload","usersReducer","map","user","followed","authAPI","email","password","rememberMe","login","isAuth","setAuthUserData","resultCode","Success","authReducer","initialized","initializedSuccess","appReducer","rootReducer","combineReducers","profilePage","messagesPage","sidebar","usersPage","auth","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","News","Music","Settings","DialogItem","props","className","s","dialog","active","to","Message","required","value","maxLengthCreator","maxLength","length","FormControl","meta","touched","error","children","hasError","formControl","Textarea","input","restProps","Input","createField","placeholder","validators","component","Field","validate","maxLength50","AddMessageReduxForm","reduxForm","onSubmit","handleSubmit","Dialogs","dialogsElements","messagesElements","dialogsItems","sendMessage","mapStateToProps","withAuthRedirect","WrappedComponent","connect","Navbar","nav","item","activeClassName","friendsListWrapper","friendsHeader","friendsList","NavbarContainer","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","e","usersSearchFormValidate","values","UsersSearchForm","React","memo","initialValues","setSubmitting","onFilterChanged","isSubmitting","as","disabled","Users","unfollow","follow","src","small","userPhoto","alt","some","Preloader","preloader","UsersContainer","getUsers","this","Component","getState","items","ProfileStatusWithHooks","editMode","setEditMode","useEffect","onDoubleClick","autoFocus","onChange","currentTarget","onBlur","updateStatus","ProfileDataFormReduxForm","style","formSummaryError","Object","keys","contacts","key","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact","ProfileInfo","content","descriptionBlock","album","large","target","files","savePhoto","saveProfile","Post","maxLength10","PostsReduxForm","MyPosts","postsElements","postsBlock","addPost","MyPostsContainer","Profile","ProfileContainer","refreshProfile","prevProps","prevState","match","params","authorizedUserId","history","getStatus","console","file","stopSubmit","_error","withRouter","Header","header","logo","loginBlock","logout","HeaderContainer","LoginReduxForm","undefined","App","initializeApp","basename","process","path","render","DialogsContainer","Login","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2ee346a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2CAu-\",\"posts\":\"MyPosts_posts__31Mc2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"album\":\"Profile_album__xGVoS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__He3Ov\",\"item\":\"Post_item__3djRZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1Ie6w\",\"item\":\"Navbar_item__1CFDi\",\"active\":\"Navbar_active__3HjG6\",\"friendsListWrapper\":\"Navbar_friendsListWrapper__3iQY4\",\"friendsList\":\"Navbar_friendsList__CSsC9\"};","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const APIInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"07442674-e8bd-4bdd-b7b5-95e92db8d98b\"\r\n    }\r\n})\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {APIInstance, ResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return APIInstance\r\n            .get<ProfileType>(`profile/${userId}`).then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return APIInstance\r\n            .get<string>(`profile/status/${userId}`).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return APIInstance\r\n            .put<ResponseType>(`profile/status`, {\r\n                status: status\r\n            }).then(response => response.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return APIInstance\r\n            .put<ResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }).then(response => response.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return APIInstance\r\n            .put<ResponseType<ProfileType>>(`profile`, profile).then(response => response.data)\r\n    }\r\n}","import {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI as ProfileApi} from \"../api/profile-api\";\r\nimport {InferActionTypes, ThunkType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, text: 'Sveta', likesCount: 1},\r\n        {id: 2, text: 'Sasha', likesCount: 3},\r\n        {id: 3, text: 'Dima', likesCount: 5},\r\n        {id: 4, text: 'Kolya', likesCount: 6},\r\n        {id: 5, text: 'Artem', likesCount: 7},\r\n        {id: 6, text: 'Vika', likesCount: 8}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {\r\n                id: 7,\r\n                text: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET-USER-PROFILE': {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'SN/PROFILE/SET-PHOTO-SUCCESS':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => {\r\n        return {\r\n            type: 'SN/PROFILE/ADD-POST',\r\n            newPostText\r\n        } as const\r\n    },\r\n    setUserProfile: (profile: ProfileType) => {\r\n        return {\r\n            type: 'SN/PROFILE/SET-USER-PROFILE',\r\n            profile\r\n        } as const\r\n    },\r\n    setStatus: (status: string) => {\r\n        return {\r\n            type: 'SN/PROFILE/SET-STATUS',\r\n            status\r\n        } as const\r\n    },\r\n    savePhotoSuccess: (photos: PhotosType) => {\r\n        return {\r\n            type: 'SN/PROFILE/SET-PHOTO-SUCCESS',\r\n            photos\r\n        } as const\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType<ActionsType> => {\r\n    return async (dispatch) => {\r\n        let data = await ProfileApi.getProfile(userId)\r\n        dispatch(actions.setUserProfile(data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType<ActionsType> => {\r\n    return (dispatch) => {\r\n        ProfileApi.getStatus(userId)\r\n            .then((response: any) => {\r\n                dispatch(actions.setStatus(response))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType<ActionsType> => {\r\n    return (dispatch) => {\r\n        ProfileApi.updateStatus(status)\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(actions.setStatus(status))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType<ActionsType> => {\r\n    return async (dispatch) => {\r\n        let data = await ProfileApi.savePhoto(file)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.savePhotoSuccess(data.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType<ActionsType | ReturnType<typeof stopSubmit>> => {\r\n    return async (dispatch, getState) => {\r\n        const userId = getState().auth.userId\r\n        let data = await ProfileApi.saveProfile(profile)\r\n        if (data.resultCode === 0) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            dispatch(stopSubmit('editProfile', {\r\n                _error: data.messages[0]\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\nexport default profileReducer","import {InferActionTypes} from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Sveta'}, {id: 2, name: 'Sasha'},\r\n        {id: 3, name: 'Dima'}, {id: 4, name: 'Kolya'},\r\n        {id: 5, name: 'Artem'}, {id: 6, name: 'Vika'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hello'}, {id: 2, message: 'Hi'},\r\n        {id: 3, message: 'How old are you?'}, {id: 4, message: 'I\\'m 26 yo'},\r\n        {id: 5, message: 'Are you here?'}, {id: 6, message: 'Yes'}\r\n    ] as Array<MessageType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/dialogs/ADD-MESSAGE': {\r\n            let newMessage = {\r\n                id: 7,\r\n                message: action.newMessageText,\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageText: string) => {\r\n        return {\r\n            type: 'SN/dialogs/ADD-MESSAGE',\r\n            newMessageText\r\n        } as const\r\n    }\r\n}\r\n\r\nexport default dialogsReducer","\r\nlet initialState = {\r\n    friends: [\r\n        {id: 1, avatar: 'http://archilab.online/images/1/123.jpg', name: 'Dima'},\r\n        {id: 2, avatar: 'https://demiart.ru/forum/journal_uploads13/j2406363_1591724080_0.jpg', name: 'Sveta'},\r\n        {id: 3, avatar: 'https://www.meme-arsenal.com/memes/0b37d82bcfd11cb3196fa5329f3bff0f.jpg', name: 'Artem'},\r\n    ]\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer","import {APIInstance, ResponseType} from \"./api\";\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term: string = '', friend: null | boolean = null) {\r\n        return APIInstance\r\n            .get<ResponseType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return APIInstance\r\n            .post<ResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n\r\n    },\r\n    unfollow(userId: number) {\r\n        return APIInstance\r\n            .delete<ResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n}","import {UserType} from \"../types/types\";\r\nimport {InferActionTypes, ThunkType} from \"./redux-store\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return {...user, followed: true}\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return {...user, followed: false}\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'SET_TOTAL_USERS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case 'TOGGLE_IS_FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType<ActionsTypes> => {\r\n    return (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setFilter(filter))\r\n        usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n            .then((data: any) => {\r\n                dispatch(actions.setUsers(data.items))\r\n                dispatch(actions.setTotalUsersCount(data.totalCount))\r\n                dispatch(actions.toggleIsFetching(false))\r\n            })\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType<ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleFollowingProgress(true, userId))\r\n        let data = await usersAPI.follow(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.followSuccess(userId))\r\n            dispatch(actions.toggleFollowingProgress(false, userId))\r\n        }\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType<ActionsTypes> => {\r\n    return (dispatch) => {\r\n        dispatch(actions.toggleFollowingProgress(true, userId))\r\n        usersAPI.unfollow(userId)\r\n            .then((data: any) => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(actions.unfollowSuccess(userId))\r\n                    dispatch(actions.toggleFollowingProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\nexport type FilterType = typeof initialState.filter\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => {\r\n        return {\r\n            type: 'FOLLOW',\r\n            userId: userId\r\n        } as const\r\n    },\r\n    unfollowSuccess: (userId: number) => {\r\n        return {\r\n            type: 'UNFOLLOW',\r\n            userId: userId\r\n        } as const\r\n    },\r\n    setUsers: (users: Array<UserType>) => {\r\n        return {\r\n            type: 'SET_USERS',\r\n            users: users\r\n        } as const\r\n    },\r\n    setTotalUsersCount: (totalCount: number) => {\r\n        return {\r\n            type: 'SET_TOTAL_USERS_COUNT',\r\n            totalCount: totalCount\r\n        } as const\r\n    },\r\n    setCurrentPage: (currentPage: number) => {\r\n        return {\r\n            type: 'SET_CURRENT_PAGE',\r\n            currentPage: currentPage\r\n        } as const\r\n    },\r\n    toggleIsFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: 'TOGGLE_IS_FETCHING',\r\n            isFetching: isFetching\r\n        } as const\r\n    },\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => {\r\n        return {\r\n            type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n            isFetching,\r\n            userId\r\n        } as const\r\n    },\r\n    setFilter: (filter: FilterType) => {\r\n        return {\r\n            type: 'SET_FILTER',\r\n            payload: filter\r\n        } as const\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {APIInstance, ResponseType} from \"./api\";\r\n\r\ntype GetMeResponseDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LogoutResponseDataType = {}\r\nexport const authAPI = {\r\n    getMe() {\r\n        return APIInstance\r\n            .get<ResponseType<GetMeResponseDataType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    login(email: null | string, password: null | string, rememberMe: boolean) {\r\n        return APIInstance\r\n            .post<ResponseType<LoginResponseDataType>>('auth/login', {\r\n                email,\r\n                password,\r\n                rememberMe\r\n            })\r\n            .then(response => response.data)\r\n    },\r\n    logout() {\r\n        return APIInstance\r\n            .delete<ResponseType<LogoutResponseDataType>>('auth/login')\r\n            .then(response => response.data)\r\n    }\r\n}","import {ResultCodesEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {InferActionTypes, ThunkType} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false\r\n    // isFetching: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: action.data.isAuth\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    setAuthUserDataSuccess: (userId: null | number, email: null | string, login: null | string, isAuth: boolean) => {\r\n        return {\r\n            type: 'SN/AUTH/SET-USER-DATA',\r\n            data: {\r\n                userId: userId,\r\n                email: email,\r\n                login: login,\r\n                isAuth\r\n            }\r\n        } as const\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\n\r\nexport const setAuthUserData = (): ThunkType<ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let data = await authAPI.getMe()\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = data.data\r\n            dispatch(actions.setAuthUserDataSuccess(id, email, login, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = (email: null | string, password: null | string, rememberMe: boolean): ThunkType<ActionsTypes | ReturnType<typeof stopSubmit>> => {\r\n    return async (dispatch) => {\r\n        let data = await authAPI.login(email, password, rememberMe)\r\n\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(setAuthUserData())\r\n        } else {\r\n            let message = data.messages.length > 0 ? data.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit('login', {\r\n                _error: message\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType<ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let data = await authAPI.logout()\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setAuthUserDataSuccess(null, null, null, false))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default authReducer","import {setAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionTypes} from \"./redux-store\";\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/SET-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const initializeApp = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAuthUserData())\r\n            .then(() => {\r\n                dispatch(actions.initializedSuccess())\r\n            })\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => {\r\n        return {\r\n            type: 'SN/APP/SET-INITIALIZED'\r\n        } as const\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\n\r\nexport default appReducer","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n\r\nexport type InferActionTypes<T extends {[key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type ThunkType<A extends Action> = ThunkAction<void, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import React from 'react'\r\n\r\nconst News = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react'\r\n\r\nconst Music = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\n\r\nconst Settings = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={`/dialogs/${props.id}`}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => {\r\n    return (value) => {\r\n        if (value && value.length > maxLength) {\r\n            return `Max length is ${maxLength} symbols`\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return(\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return(\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string> (placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: \"input\" | \"textarea\" | \"select\" | React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = '') {\r\n    return(\r\n        <div>\r\n            <Field placeholder={placeholder} name={name} validate={validators} component={component} {...props}/> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {createField, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\nimport {NewMessageFormType} from \"../Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype NewMessageFormTypeKeys = Extract<keyof NewMessageFormType, string>\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormTypeKeys>(\"Enter new message text\", \"newMessageText\", [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Отправить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageReduxForm = reduxForm<NewMessageFormType>({\r\n    form: 'dialogs',\r\n})(AddMessageForm)","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {AddMessageReduxForm} from \"./AddMessageForm/AddMessageReduxForm\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = {\r\n    messagesPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let dialogsElements = props.messagesPage.dialogs.map(dialog => (\r\n        <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>\r\n    ))\r\n\r\n    let messagesElements = props.messagesPage.messages.map(message => (\r\n        <Message key={message.id} message={message.message}/>\r\n    ))\r\n\r\n    let onSubmit = (formData: NewMessageFormType) => {\r\n        props.sendMessage(formData.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddMessageReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType> = (props) => {\r\n        if (!props.isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect<MapPropsType, {}, {}, AppStateType>(mapStateToProps)(RedirectComponent)\r\n}","import {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {sendMessage: actions.sendMessage}),\r\n    withAuthRedirect,\r\n)(Dialogs)","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar: React.FC = (props) => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to={'/profile'} activeClassName={s.active}>\r\n                    Profile\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={'/dialogs'} activeClassName={s.active}>\r\n                    Messages\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={'/users'} activeClassName={s.active}>\r\n                    Users\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={'/news'} activeClassName={s.active}>\r\n                    News\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={'/music'} activeClassName={s.active}>\r\n                    Music\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={'/settings'} activeClassName={s.active}>\r\n                    Settings\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.friendsListWrapper}>\r\n                <h3 className={s.friendsHeader}>Friends</h3>\r\n                <div className={s.friendsList}>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import Navbar from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state.sidebar\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {}\r\n}\r\n\r\nconst NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar)\r\n\r\n\r\nexport default NavbarContainer","export default __webpack_public_path__ + \"static/media/default_user.ab7efdc7.png\";","import styles from \"../../Users/Users.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalUsersCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n\r\n    let pages = []\r\n\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [styles.selectedPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p);\r\n                                 }}>{p}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Paginator","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo((props) => {\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\"\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{term: '', friend: \"null\"}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field as=\"select\" name=\"friend\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/default_user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    onFilterChanged: (filter: FilterType) => void\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<PropsType> = ({currentPage, totalUsersCount, pageSize, onPageChanged, users, followingInProgress, unfollow, follow, ...props}) => {\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={props.onFilterChanged}/>\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalUsersCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n            />\r\n            {\r\n                users.map(user => <div key={user.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userPhoto} className={s.userPhoto}\r\n                                 alt=\"\"/>\r\n                                 </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                user.followed\r\n                                    ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => unfollow(user.id)}>Unfollow</button>\r\n                                    : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => follow(user.id)}>Follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{user.name}</div>\r\n                            <div>{user.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"user.location.country\"}</div>\r\n                            <div>{\"user.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","export default __webpack_public_path__ + \"static/media/loader.9637ee70.svg\";","import preloader from \"../../../assets/images/loader.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader: React.FC = () => {\r\n    return(\r\n        <div>\r\n            <img alt=\"\" src={preloader}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    getUsers, unfollow, actions, FilterType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    filter: FilterType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize, this.props.filter)\r\n\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize, filter} = this.props\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.getUsers(pageNumber, pageSize, filter)\r\n    }\r\n\r\n    onFilterChanged = (filter: FilterType) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(1, pageSize, filter)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    onFilterChanged={this.onFilterChanged}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n        filter: state.usersPage.filter\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n    setCurrentPage: actions.setCurrentPage,\r\n    getUsers,\r\n    follow,\r\n    unfollow\r\n}), withAuthRedirect)(UsersContainer)","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { !editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>Status: {props.status}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input  autoFocus={true} onChange={onStatusChange} onBlur={deactivateMode} value={status}/>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save</button></div>\r\n            { error && <div className={style.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <b>Full name:</b>\r\n                {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: 'checkbox'})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me: </b>\r\n                {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts: </b>\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return(\r\n                        <div key={key} className={s.contacts}>\r\n                            <b>{key}: </b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form:'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/default_user.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStausWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    saveProfile: (profile: ProfileType) => void\r\n    savePhoto: (photoFile: File) => void\r\n    isOwner: boolean\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    let onSubmit = (formData: ProfileType) => {\r\n        props.saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            {/*<div>*/}\r\n            {/*    <img className={s.album}*/}\r\n            {/*         src=\"https://media-exp1.licdn.com/dms/image/C4D1BAQGDmALg_8s-Yg/company-background_10000/0/1519799119530?e=2159024400&v=beta&t=4WV9YKR9L3PAEnppWmPPMk5xVnETtWvhZN8NexEzPwM\"*/}\r\n            {/*         alt=\"\"/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.album}\r\n                     src={props.profile.photos.large || userPhoto}\r\n                     alt=\"\"/>\r\n                { props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                { editMode ? <ProfileDataForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile}/> : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {setEditMode(true)}}/>}\r\n            </div>\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n    return(\r\n        <div>\r\n            { props.isOwner && <div><button onClick={props.goToEditMode}>Edit</button></div>}\r\n            <div>\r\n                <b>Full name: </b>{ props.profile.fullName }\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>{ props.profile.lookingForAJob ? \"yes\" : 'No' }\r\n            </div>\r\n            { props.profile.lookingForAJob && <div>\r\n                <b>My professional skills: {props.profile.lookingForAJobDescription}</b>\r\n            </div>}\r\n            <div>\r\n                <b>About me: </b>{props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts: </b>{Object.keys(props.profile.contacts).map((key) => <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key as keyof ContactsType]}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return(\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}:</b> {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://avatars.mds.yandex.net/get-ott/374297/2a000001616b87458162c9216ccd5144e94d/678x380\"\r\n                 alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {NewMessageFormType} from \"../../../Dialogs/Dialogs\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst PostsForm: React.FC<InjectedFormProps<AddPostFormValuesType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormTypeKeys>(\"\\\"Enter new post text\", \"newPostText\", [required, maxLength10], Textarea)}\r\n\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const PostsReduxForm = reduxForm<AddPostFormValuesType, {}>({\r\n    form: 'posts',\r\n})(PostsForm)","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {AddPostFormValuesType, PostsReduxForm} from \"./AddPostForm/PostsReduxForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n    let postsElements = props.posts.map(post => <Post key={post.id} message={post.text} likesCount={post.likesCount}/>)\r\n\r\n    let onSubmit = (formData: AddPostFormValuesType) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <PostsReduxForm onSubmit={onSubmit}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import {actions} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPostActionCreator})(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType>{\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI or state\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import React from 'react'\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img className={s.logo} src=\"https://cdn.worldvectorlogo.com/logos/mediafire-1-3.svg\" alt=\"\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ?\r\n                    <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    :\r\n                    <NavLink to={'/login'}>\r\n                        Login\r\n                    </NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport Header, {DispatchPropsType, MapPropsType} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    logout\r\n})(HeaderContainer);","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from './../common/FormsControls/FormsControls.module.css'\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType>> = ({handleSubmit, error}) => {\r\n    return(\r\n            <form onSubmit={handleSubmit}>\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n                {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [required], Input, {type: \"checkbox\"})}\r\n                {\r\n                    error && <div className={s.formSummaryError}>\r\n                        {error}\r\n                    </div>\r\n                }\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType>({\r\n    form: 'login',\r\n})(LoginForm)\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = keyof LoginFormValuesType\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(\r\n            formData.email,\r\n            formData.password,\r\n            formData.rememberMe\r\n        )\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import './App.css';\nimport {HashRouter, Route} from \"react-router-dom\"\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport NavbarContainer from \"./components/Navbar/NavbarContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {Component, ComponentType} from \"react\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {AppStateType} from \"./redux/redux-store\";\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <HashRouter basename={process.env.PUBLIC_URL}>\n                <div className={'app-wrapper'}>\n                    <HeaderContainer/>\n                    <NavbarContainer/>\n                    <div className={'app-wrapper-content'}>\n                        <Route\n                            path={'/dialogs'}\n                            render={() => <DialogsContainer/>}\n                        />\n                        <Route\n                            path={'/profile/:userId?'}\n                            render={() => <ProfileContainer/>}\n                        />\n                        <Route\n                            path={'/users'}\n                            render={() => <UsersContainer/>}\n                        />\n                        <Route path={'/news'} component={News}/>\n                        <Route path={'/music'} component={Music}/>\n                        <Route path={'/settings'} component={Settings}/>\n                        <Route path={'/login'} component={Login}/>\n                    </div>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nexport default connect(mapStateToProps, {initializeApp})(App)\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n    document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3RYuC\",\"dialogsItems\":\"Dialogs_dialogsItems__3IUAr\",\"active\":\"Dialogs_active__2PPCz\",\"dialog\":\"Dialogs_dialog__3WC3I\",\"messages\":\"Dialogs_messages__FuCIo\",\"message\":\"Dialogs_message__1nwrv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Dg07\",\"error\":\"FormsControls_error__1ApSp\",\"formSummaryError\":\"FormsControls_formSummaryError__T1IGs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1P51r\",\"contact\":\"ProfileInfo_contact__3xWC8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Users_paginator__yjAOx\",\"pageNumber\":\"Users_pageNumber__3wN7K\",\"selectedPage\":\"Users_selectedPage__1RWrX\",\"userPhoto\":\"Users_userPhoto__KTviU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__33sCE\",\"logo\":\"Header_logo__j0zlY\",\"loginBlock\":\"Header_loginBlock__3oN2m\"};"],"sourceRoot":""}